name: Deploy Portainer Services

on:
  push:
    paths:
      - "docker/*"
  workflow_dispatch:

env:
  DOCKER_MAPPING: _mapping.json
  PORTAINER_API_TOKEN: ${{ secrets.PORTAINER_API_TOKEN }}
  PORTAINER_URL: https://portainer.excloo.org
  TAILSCALE_HOSTNAME: github-${{ github.run_id }}-${{ github.run_number }}
  TAILSCALE_TAG: ephemeral
  WORKING_DIRECTORY: docker

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Generate matrix
        id: generate-matrix
        run: |
          SERVICES=$(find ${{ env.WORKING_DIRECTORY }} -maxdepth 1 -mindepth 1 -name "*.yaml" -printf "%f\n" | sed 's/\.yaml$//' | jq -c -s -R 'split("\n")[:-1]')
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            SERVICES=$(echo "$SERVICES" | jq -c 'map(select(. | IN(${{ toJson(github.event.commits[0].modified) }})))')
          fi
          echo "matrix=$SERVICES" >> $GITHUB_OUTPUT

  deploy:
    if: needs.generate-matrix.outputs.matrix != '[]'
    name: Deploy to Portainer
    needs: generate-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          hostname: ${{ env.TAILSCALE_HOSTNAME }}
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tags: tag:${{ env.TAILSCALE_TAG }}
      - name: Get Portainer endpoints
        id: get-portainer-endpoints
        run: |
          PORTAINER_ENDPOINTS=$(curl -s -H "X-API-Key: ${{ env.PORTAINER_API_TOKEN }}" "${{ env.PORTAINER_URL }}/api/endpoints")
          echo "output=$PORTAINER_ENDPOINTS" >> $GITHUB_OUTPUT
      - name: Get Portainer stacks
        id: get-portainer-stacks
        run: |
          PORTAINER_STACKS=$(curl -s -H "X-API-Key: ${{ env.PORTAINER_API_TOKEN }}" "${{ env.PORTAINER_URL }}/api/stacks")
          echo "output=$PORTAINER_STACKS" >> $GITHUB_OUTPUT
      - name: Read Docker file
        id: read-docker-compose-file
        run: |
          DOCKER_COMPOSE_FILE=$(cat ${{ env.WORKING_DIRECTORY }}/${{ matrix.service }}.yaml)
          echo "output<<EOF" >> $GITHUB_OUTPUT
          echo "$DOCKER_COMPOSE_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Read Docker mapping
        id: read-docker-mapping
        run: |
          DOCKER_MAPPING=$(cat ${{ env.WORKING_DIRECTORY }}/${{ env.DOCKER_MAPPING }})
          echo "output=$DOCKER_MAPPING" >> $GITHUB_OUTPUT
      - name: Determine deployment actions
        id: determine-actions
        env:
          DOCKER_MAPPING: ${{ steps.read-docker-mapping.outputs.output }}
          PORTAINER_ENDPOINTS: ${{ steps.get-portainer-endpoints.outputs.output }}
          PORTAINER_STACKS: ${{ steps.get-portainer-stacks.outputs.output }}
        run: |
          DEPLOYMENT_ACTIONS=$(echo "$PORTAINER_ENDPOINTS" | jq -c '.[]' | while read -r ENDPOINT; do
            ENDPOINT_ID=$(echo "$ENDPOINT" | jq -r '.Id')
            ENDPOINT_NAME=$(echo "$ENDPOINT" | jq -r '.Name')
            if [ -n "$DOCKER_MAPPING" ] && echo "$DOCKER_MAPPING" | jq -e --arg endpoint "$ENDPOINT_NAME" --arg service "${{ matrix.service }}" '.[$service] | contains([$endpoint])' > /dev/null; then
              EXISTING_STACK=$(echo "$PORTAINER_STACKS" | jq -r --arg endpoint_id "$ENDPOINT_ID" --arg service "${{ matrix.service }}" '.[] | select(.EndpointId == ($endpoint_id | tonumber) and .Name == $service) | .Id')
              if [ -n "$EXISTING_STACK" ]; then
                echo "{\"action\":\"update\",\"endpoint_id\":\"$ENDPOINT_ID\",\"endpoint_name\":\"$ENDPOINT_NAME\",\"stack_id\":\"$EXISTING_STACK\"}"
              else
                echo "{\"action\":\"deploy\",\"endpoint_id\":\"$ENDPOINT_ID\",\"endpoint_name\":\"$ENDPOINT_NAME\"}"
              fi
            fi
          done | jq -s .)
          echo "output=$DEPLOYMENT_ACTIONS" >> $GITHUB_OUTPUT
      - name: Deploy to Portainer
        env:
          ACTIONS: ${{ steps.determine-actions.outputs.output }}
          DOCKER_COMPOSE_FILE: ${{ steps.read-docker-compose-file.outputs.output }}
        run: |
          echo "$ACTIONS" | jq -c '.[]' | while read -r ACTION; do
            ACTION_TYPE=$(echo $ACTION | jq -r '.action')
            ENDPOINT_ID=$(echo $ACTION | jq -r '.endpoint_id')
            ENDPOINT_NAME=$(echo $ACTION | jq -r '.endpoint_name')
            STACK_ID=$(echo $ACTION | jq -r '.stack_id // empty')
            if [ "$ACTION_TYPE" = "update" ]; then
              echo "Updating '${{ matrix.service }}' on endpoint '$ENDPOINT_NAME'..."
              curl -X PUT \
                -H "Content-Type: application/json" \
                -H "X-API-Key: ${{ env.PORTAINER_API_TOKEN }}" \
                -d "{\"prune\": true, \"pullImage\": true, \"stackFileContent\": \"$DOCKER_COMPOSE_FILE\"}" \
                "${{ env.PORTAINER_URL }}/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID"
            else
              echo "Deploying '${{ matrix.service }}' to endpoint '$ENDPOINT_NAME'..."
              curl -X POST \
                -H "Content-Type: application/json" \
                -H "X-API-Key: ${{ env.PORTAINER_API_TOKEN }}" \
                -d "{\"name\": \"${{ matrix.service }}\", \"stackFileContent\": \"$DOCKER_COMPOSE_FILE\"}" \
                "${{ env.PORTAINER_URL }}/api/stacks/create/standalone/string?endpointId=$ENDPOINT_ID"
            fi
            if [ $? -eq 0 ]; then
              echo "Successfully '$ACTION_TYPE' Portainer stack '${{ matrix.service }}' on endpoint '$ENDPOINT_NAME'."
            else
              echo "Failed to '$ACTION_TYPE' Portainer stack '${{ matrix.service }}' on endpoint '$ENDPOINT_NAME'."
              exit 1
            fi
          done
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        service: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
