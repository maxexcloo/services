name: Check Changes & Deploy

on:
  push:
    paths:
      - "**/*"
  workflow_dispatch:
    inputs:
      bypass_check:
        default: "false"
        description: "Bypass Change Check"

jobs:
  generate-matrix:
    name: Generate Matrix
    outputs:
      matrix: ${{ env.MATRIX }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate matrix
        id: set-matrix
        run: |
          DIRS=$(find . -maxdepth 1 -mindepth 1 -not -name ".*" -type d)
          FIRST=true

          MATRIX="{\"include\":["
          for DIR in $DIRS; do
            ENDPOINTS=$(cat $DIR/ENDPOINTS)
            if [ $FIRST = true ]; then
              FIRST=false
            else
              MATRIX="$MATRIX,"
            fi
            MATRIX="$MATRIX{\"dir\":\"${DIR#./}\",\"endpoints\":\"$ENDPOINTS\"}"
          done
          MATRIX="$MATRIX]}"

          echo "MATRIX=$MATRIX" >> $GITHUB_ENV

  check-changes-and-deploy:
    name: Check Changes & Deploy
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes in ${{ matrix.dir }}
        run: |
          if [ "${{ github.event.inputs.bypass_check }}" == "true" ]; then
            echo "NEW_RELEASE=bypass" >> $GITHUB_ENV
            echo "Bypassing change check as requested."
          else
            if [[ -f ${{ matrix.dir }}/docker-compose.yaml ]]; then
              if [[ $(git diff --name-only HEAD^ HEAD ${{ matrix.dir }}) ]]; then
                echo "NEW_RELEASE=true" >> $GITHUB_ENV
                echo "Changes detected, new release."
              else
                echo "NEW_RELEASE=false" >> $GITHUB_ENV
                echo "No new release."
              fi
            else
              echo "NEW_RELEASE=false" >> $GITHUB_ENV
              echo "No docker-compose.yaml file found for ${{ matrix.dir }}, skipping."
            fi
          fi

      - uses: actions/setup-python@v5
        if: env.NEW_RELEASE != 'false'
        with:
          python-version: "3.x"

      - name: Deploy ${{ matrix.dir }} to Portainer
        env:
          APP_DIR: ${{ matrix.dir }}
          APP_ENDPOINTS: ${{ matrix.endpoints }}
          CLOUDFLARE_API_TOKENS: ${{ secrets.CLOUDFLARE_API_TOKENS }}
          DATABASE_PASSWORDS: ${{ secrets.DATABASE_PASSWORDS }}
          PORTAINER_API_TOKEN: ${{ secrets.PORTAINER_API_TOKEN }}
          PORTAINER_URL: ${{ vars.PORTAINER_URL }}
          RESEND_API_KEYS: ${{ secrets.RESEND_API_KEYS }}
          SECRET_HASHES: ${{ secrets.SECRET_HASHES }}
          SERVERS: ${{ vars.SERVERS }}
          WEBSITES: ${{ secrets.WEBSITES }}
        if: env.NEW_RELEASE != 'false'
        run: |
          python - <<'EOF'
          import csv
          import json
          import os
          import requests

          app_dir = json.loads(os.getenv("APP_DIR"))
          app_endpoints = csv.reader(os.getenv("APP_ENDPOINTS"))
          cloudflare_api_tokens = json.loads(os.getenv("CLOUDFLARE_API_TOKENS"))
          database_passwords = json.loads(os.getenv("DATABASE_PASSWORDS"))
          portainer_headers = {"Content-Type": "application/json", "X-API-Key": os.getenv("PORTAINER_API_TOKEN")}
          portainer_url = f"{os.getenv("PORTAINER_URL")}/api"
          resend_api_keys = json.loads(os.getenv("RESEND_API_KEYS"))
          secret_hashes = json.loads(os.getenv("SECRET_HASHES"))
          servers = json.loads(os.getenv("SERVERS"))
          websites = json.loads(os.getenv("WEBSITES"))

          endpoints = []
          response = requests.get(f"{portainer_url}/endpoints", headers=portainer_headers)
          if response.status_code == 200:
              data = response.json()
              for endpoint in response.json():
                  endpoints.append({"id": endpoint["Id"], "name": endpoint["Name"]})
          else:
              print("Failed to retrieve endpoints:", response.status_code)

          print(endpoints)
          EOF
